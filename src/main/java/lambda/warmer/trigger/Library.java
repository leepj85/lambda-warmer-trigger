/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lambda.warmer.trigger;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.LambdaLogger;
import com.amazonaws.AmazonServiceException;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;
import com.amazonaws.services.dynamodbv2.document.DynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;

public class Library {

    private DynamoDB dynamoDb;
    private String DYNAMODB_TABLE_NAME = "taskmaster";
    private Regions REGION = Regions.US_WEST_2;

    public Task changeHandler(Task task) {
        final AmazonDynamoDB ddb = AmazonDynamoDBClientBuilder.defaultClient();
        DynamoDBMapper ddbMapper = new DynamoDBMapper(ddb);

        Task dbTask;
        //existing task record
        if (task.getId() != null) {
            dbTask = ddbMapper.load(Task.class, task.getId());
            if (task.getAssignee() != null) {
                dbTask.setAssignee(task.getAssignee());
            //do status change.
            } else if (task.getStatus() != null) {
                String currentStatus = task.getStatus();
                if(currentStatus.equals("available")){
                    currentStatus = "assigned";
                    History history = new History("Task assigned to " + dbTask.getAssignee());
                    dbTask.addToHistory(history);
                }else if(currentStatus.equals("assigned")){
                    currentStatus = "accepted";
                    History history = new History("Task accepted by " + dbTask.getAssignee());
                    dbTask.addToHistory(history);
                }else if(currentStatus.equals("accepted")){
                    currentStatus = "finished";
                    History history = new History("Task finished by " + dbTask.getAssignee());
                    dbTask.addToHistory(history);
                }
                dbTask.setStatus(currentStatus);
            }
        //new task record
        } else {
            // no assignee passed
            if(task.getAssignee() == null) {
                dbTask = new Task(task.getTitle(), task.getDescription());
            //assignee included
            } else {
                dbTask = new Task(task.getTitle(), task.getDescription(), task.getAssignee());
            }
        }
        ddbMapper.save(dbTask);
        return dbTask;
    }

    public boolean someLibraryMethod() {
        return true;
    }

    public boolean logMe(Context context) {
        LambdaLogger logger = context.getLogger();
        logger.log("This has been logged: " + context.toString());
        return true;
    }


}
